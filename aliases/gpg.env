# CHANGE the below GPG_EMAIL !!!!!!!! to your's
GPG_EMAIL="Bob@home.local"
# You might want a smaller pwd for site compatibility??
NEW_PASSWORD_SIZE=26
GPG_PASS_STORE=~/.password-store
GPG_APP="/usr/bin/gpg"
# Un-comment below if gpg is not in the: /usr/bin path!
#GPG_APP="$(which gpg)"

_parse_gpg_system_name() {
  if [ ! -x $GPG_APP ]; then
     echo "Please install the gpg program!"
     return 1
  fi
  if [ ! -x $(which pass) ]; then
     echo "You should install the pass program!"
     echo "pass: the standard unix password manager."
  fi
  if [ ! -d "$GPG_PASS_STORE" ]; then
     echo -e "GPG PASS program has not made the ~/.password-store folder yet! Bailing!\n"
     return 1
  fi

  saveIFS=$IFS
  IFS="/"
  local parts=($1)
  IFS=$saveIFS
  local count_gp=${#parts[@]}

  local part1=${parts[0]}
  if [ $count_gp -eq 1 ]; then
     myGPG_folder=""
     myGPG_file="$part1"
     return 0
  fi
  if [ $count_gp -eq 2 ]; then
     local part2=${parts[1]}
     myGPG_folder="$GPG_PASS_STORE/$part1"
     myGPG_file="$part2"
     return 0
  fi
  if [ $count_gp -gt 2 ]; then
    local part2=${parts[1]}
    local lastthing=${1##*/}
    myGPG_folder="$GPG_PASS_STORE/$part1/$part2"
    myGPG_file="$lastthing"
    return 0
  fi
  echo "Invaild System Name."
  return 1
}

new-pwd() {
  if [ -z "$1" ]; then
     echo "Please assign system-name!"
  else
     _parse_gpg_system_name "$1"
     if [ $? -ne 0 ]; then
        return 1
     fi
     if [ -z "$myGPG_file" ]; then
        return 1
     fi

     local syb_size=3
     local syb1=$(tr -dc '!@#^&*(){}[];:,.?' < /dev/urandom | head -c $syb_size)
     local syb2=$(tr -dc '!@#^&*(){}[];:,.?' < /dev/urandom | head -c $syb_size)
	
     #echo "$(pwdgen)" >> /tmp/np
     echo "$syb1$(long-password $NEW_PASSWORD_SIZE)$syb2" > /tmp/np

     if [ -f /tmp/np.gpg ]; then
        rm /tmp/np.gpg
     fi

     if [ -z "$2" ]; then
        $GPG_APP -r "$GPG_EMAIL" --encrypt /tmp/np
        if [ $? -ne 0 ]; then
          echo "GPG unable to find user's email of $GPG_EMAIL"
          return 1
        fi
     else
        $GPG_APP -r "$2" --encrypt /tmp/np
        if [ $? -ne 0 ]; then
          echo "GPG unable to find user's email of $2"
          return 1
        fi
     fi

     cat /tmp/np 
     rm /tmp/np
     
     if [ -n "$myGPG_folder" ]; then
	mkdir -p "$myGPG_folder"
	mv /tmp/np.gpg "$myGPG_folder/$myGPG_file.gpg"
     else
        mv /tmp/np.gpg "$GPG_PASS_STORE/$myGPG_file.gpg"	
     fi   
  fi
}

new-mempass() {
  if [ -z "$1" ]; then
     echo "Please assign system-name!"
  else
     _parse_gpg_system_name "$1"
     if [ $? -ne 0 ]; then
        return 1
     fi
     if [ -z "$myGPG_file" ]; then
        return 1
     fi

     local syb_size=3
     local syb1=$(tr -dc '!@#^&*(){}[];:,.?' < /dev/urandom | head -c $syb_size)
     local syb2=$(tr -dc '!@#^&*(){}[];:,.?' < /dev/urandom | head -c $syb_size)

     echo -e "$syb1$(mempass)$syb2" > /tmp/np
     if [ -f /tmp/np.gpg ]; then
        rm /tmp/np.gpg
     fi

     if [ -z "$2" ]; then
        $GPG_APP -r "$GPG_EMAIL" --encrypt /tmp/np
        if [ $? -ne 0 ]; then
          echo "GPG unable to find user's email of $GPG_EMAIL"
          return 1
        fi
     else
	$GPG_APP -r "$2" --encrypt /tmp/np
        if [ $? -ne 0 ]; then
          echo "GPG unable to find user's email of $2"
          return 1
        fi
     fi

     cat /tmp/np 
     rm /tmp/np
     
     if [ -n "$myGPG_folder" ]; then
        mkdir -p "$myGPG_folder"
	mv /tmp/np.gpg "$myGPG_folder/$myGPG_file.gpg"
     else
        mv /tmp/np.gpg "$GPG_PASS_STORE/$myGPG_file.gpg"	
     fi   
  fi
}
